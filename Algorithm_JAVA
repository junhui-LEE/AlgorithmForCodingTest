import java.util.*;

class Solution {
    static class Item{
        String str;
        int move;
        public Item(String str, int move){
            this.str = str;
            this.move = move;
        }
    }

    public int solution(String begin, String target, String[] words) {
        int answer = 0;
        boolean[] visited = new boolean[words.length];
        Item i = bfs(begin, target, words, visited);
        answer = i.move;
        return answer;
    }
    
    public Item bfs(String begin, String target, String[] words, boolean[] visited){
        Queue<Item> queue = new LinkedList<>();
        queue.add(new Item(begin,0));
        
        
        while(!queue.isEmpty()){
            Item item = queue.poll();
            if(item.str.equals(target)){
                return item;
            }
            for(int i=0; i<words.length; i++){
                if(isCanConvert(item.str, words[i], visited[i])){
                    visited[i] = true;
                    queue.add(new Item(words[i], item.move+1));
                }
            }
        }
        return new Item("",0);
    }
    
    public boolean isCanConvert(String str, String word, boolean visited){
        int cnt = 0;
        if(!visited){
            for(int i=0; i<str.length(); i++){
                if(str.charAt(i) == word.charAt(i)) cnt++;
                if(cnt == str.length()-1) return true;
            }
        }
        return false;
    }
    
}
